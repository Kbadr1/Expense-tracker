{"version":3,"sources":["components/Header.js","context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","state","action","type","transactions","filter","transaction","id","payload","intialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","IncomeExpenses","amounts","income","expense","Transaction","sign","amountColor","text","style","color","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.729cb0e1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n\r\n    return (\r\n        <div className=\"header text-center pt-3 pb-3 row\">\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                <h2>Expense Tracker</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export default (state, action) => {\r\n    switch(action.type) {\r\n        case \"DELTE_TRANSACTION\":\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n        case \"ADD_TRANSACTION\":\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst intialState = {\r\n    transactions: []\r\n}\r\n\r\nexport const GlobalContext = createContext(intialState);\r\n\r\nconst GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, intialState);\r\n\r\n    const deleteTransaction = id => {\r\n        dispatch({\r\n            type: \"DELTE_TRANSACTION\",\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    const addTransaction = transaction => {\r\n        dispatch({\r\n            type: \"ADD_TRANSACTION\",\r\n            payload: transaction\r\n        })\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{ transactions: state.transactions, deleteTransaction, addTransaction }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n}\r\n \r\nexport default GlobalProvider;","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Balance = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n    const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"balance pb-3 row pb-4\">\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                <h4>Your Balance</h4>\r\n                <h2>${total}</h2>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Balance\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst IncomeExpenses = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    const amounts = transactions.map(transaction => transaction.amount);\r\n\r\n    const income = amounts\r\n        .filter(item => item > 0)\r\n        .reduce((acc, item) => (acc += item), 0)\r\n        .toFixed(2);\r\n\r\n    const expense = (amounts.filter(item => item < 0).reduce((acc, item) => (acc += item), 0) * -1).toFixed(2);\r\n\r\n    return (\r\n        <div className=\"income-expense pb-4 pl-3 pr-3 row\">\r\n            <div className=\"box col-md-4 offset-md-4\">\r\n                <div className=\"row pt-3 pb-3\">\r\n                    <div className=\"box-element col-6\">\r\n                        <h5 className=\"text-center\">Income</h5>\r\n                        <h6 className=\"income-money text-center\">${income}</h6>\r\n                    </div>\r\n                    <div className=\"box-element col-6\">\r\n                        <h5 className=\"text-center\">Expense</h5>\r\n                        <h6 className=\"expense-money text-center\">${expense}</h6>\r\n                    </div>\r\n                </div>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default IncomeExpenses\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Transaction = ({ transaction }) => {\r\n\r\n    const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n    const sign = transaction.amount < 0 ? \"-\" : \"+\";\r\n    const amountColor = sign === \"-\" ? \"red\" : \"green\";\r\n    return (\r\n        <li>\r\n            <p>\r\n                {transaction.text}\r\n                <span style={{color: amountColor}}>{sign}${Math.abs(transaction.amount)}</span>\r\n                <button onClick={() => deleteTransaction(transaction.id)}>\r\n                    <i className=\"fa fa-remove\"></i>\r\n                </button>\r\n            </p>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Transaction\r\n","import React, { useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport Transaction from './Transaction';\r\n\r\nconst TransactionList = () => {\r\n\r\n    const { transactions } = useContext(GlobalContext);\r\n\r\n    return (\r\n        <div className=\"transaction-list pb-3 row\">\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                <h4>History</h4>\r\n                <ul>\r\n                    {transactions.map(transaction => <Transaction key={transaction.id} transaction={transaction} /> )}\r\n                </ul>\r\n                <hr/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TransactionList\r\n","import React, { useState, useContext } from 'react';\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst AddTransaction = () => {\r\n    const [text, setText] = useState(\"\");\r\n    const [amount, setAmount] = useState(0);\r\n\r\n    const { addTransaction } = useContext(GlobalContext);\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        const newTransaction = {\r\n            id: Math.floor(Math.random() * 100000000),\r\n            text,\r\n            amount: +amount\r\n        }\r\n        addTransaction(newTransaction);\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-transaction row\">\r\n            <div className=\"col-md-4 offset-md-4\">\r\n                <h4>Add new transaction</h4>\r\n                <form onSubmit={onSubmit}>\r\n                    <div>\r\n                        <label htmlFor=\"text\">Transaction</label>\r\n                        <br/>\r\n                        <input type=\"text\" value={text} onChange={e => setText(e.target.value)} placeholder=\"Enter transaction...\"/>\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor=\"amount\">Amount  <span>(negative - expense, positive - income)</span></label>\r\n                        <input type=\"number\" value={amount} onChange={e => setAmount(e.target.value)} placeholder=\"Enter amount...\"/>\r\n                    </div>\r\n                    <button>Add transaction</button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddTransaction\r\n","import React from 'react';\nimport './App.scss';\nimport Header from './components/Header';\nimport Balance from './components/Balance';\nimport IncomeExpenses from './components/IncomeExpenses';\nimport TransactionList from './components/TransactionList';\nimport AddTransaction from './components/AddTransaction';\nimport GlobalProvider from \"./context/GlobalState\";\n\nfunction App() {\n    return (\n        <GlobalProvider>\n            <div className=\"app container\">\n                <Header />\n                <Balance />\n                <IncomeExpenses />\n                <TransactionList />\n                <AddTransaction />\n            </div>\n        </GlobalProvider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}