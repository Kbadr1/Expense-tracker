{"version":3,"sources":["context/AppReducer.js","context/GlobalState.js","components/Balance.js","components/IncomeExpenses.js","components/Transaction.js","components/TransactionList.js","components/AddTransaction.js","App.js","serviceWorker.js","index.js"],"names":["state","action","type","transactions","filter","transaction","id","payload","intialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","Balance","total","useContext","map","amount","reduce","acc","item","toFixed","useState","balanceColor","setBalanceColor","sign","setSign","useEffect","className","Math","abs","IncomeExpenses","amounts","income","expense","Transaction","amountColor","onClick","text","style","color","TransactionList","key","AddTransaction","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a17e5b49.chunk.js","sourcesContent":["export default (state, action) => {\r\n    switch(action.type) {\r\n        case \"DELTE_TRANSACTION\":\r\n            return {\r\n                ...state,\r\n                transactions: state.transactions.filter(transaction => transaction.id !== action.payload)\r\n            }\r\n        case \"ADD_TRANSACTION\":\r\n            return {\r\n                ...state,\r\n                transactions: [action.payload, ...state.transactions]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { createContext, useReducer } from 'react';\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst intialState = {\r\n    transactions: []\r\n}\r\n\r\nexport const GlobalContext = createContext(intialState);\r\n\r\nconst GlobalProvider = ({ children }) => {\r\n    const [state, dispatch] = useReducer(AppReducer, intialState);\r\n\r\n    const deleteTransaction = id => {\r\n        dispatch({\r\n            type: \"DELTE_TRANSACTION\",\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    const addTransaction = transaction => {\r\n        dispatch({\r\n            type: \"ADD_TRANSACTION\",\r\n            payload: transaction\r\n        })\r\n    }\r\n\r\n    return (\r\n        <GlobalContext.Provider value={{ transactions: state.transactions, deleteTransaction, addTransaction }}>\r\n            {children}\r\n        </GlobalContext.Provider>\r\n    );\r\n}\r\n \r\nexport default GlobalProvider;","import React, { useContext } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((transaction) => transaction.amount);\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n  const [balanceColor, setBalanceColor] = useState(\"\");\r\n  const [sign, setSign] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    if (total > 0) {\r\n      setBalanceColor(\"positive\");\r\n      setSign(\"+\");\r\n    } else if (total < 0) {\r\n      setBalanceColor(\"negative\");\r\n      setSign(\"-\");\r\n    } else {\r\n      setBalanceColor(\"zero\");\r\n      setSign(\"\");\r\n    }\r\n  }, [total]);\r\n\r\n  return (\r\n    <div className=\"balance\">\r\n      <h2 className=\"title\">Your balance</h2>\r\n      <h2 className={`total ${balanceColor}`}>\r\n        {sign} ${Math.abs(total)}\r\n      </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst IncomeExpenses = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((transaction) => transaction.amount);\r\n\r\n  const income = amounts\r\n    .filter((item) => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const expense = (\r\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n\r\n  return (\r\n    <div className=\"income-expense\">\r\n      <div>\r\n        <h4 className=\"text-center\">Income</h4>\r\n        <h5 className=\"positive\">${income}</h5>\r\n      </div>\r\n      <div>\r\n        <h4 className=\"text-center\">Expense</h4>\r\n        <h5 className=\"negative\">${expense}</h5>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeExpenses;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst Transaction = ({ transaction }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  const sign = transaction.amount < 0 ? \"-\" : \"+\";\r\n  const amountColor = sign === \"-\" ? \"red\" : \"green\";\r\n  return (\r\n    <li>\r\n      <div>\r\n        <button onClick={() => deleteTransaction(transaction.id)}>\r\n          <i className=\"fa fa-remove\"></i>\r\n        </button>\r\n        {transaction.text}\r\n      </div>\r\n      <div>\r\n        <span style={{ color: amountColor }}>\r\n          {sign}${Math.abs(transaction.amount)}\r\n        </span>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nconst TransactionList = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <div className=\"transaction-list\">\r\n      <h2 className=\"title\">History</h2>\r\n      <ul>\r\n        {transactions.map((transaction) => (\r\n          <Transaction key={transaction.id} transaction={transaction} />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../context/GlobalState\";\r\n\r\nconst AddTransaction = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 100000000),\r\n      text,\r\n      amount: +amount,\r\n    };\r\n    addTransaction(newTransaction);\r\n  };\r\n\r\n  return (\r\n    <div className=\"add-transaction\">\r\n      <h2 className=\"title\">Add new transaction</h2>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"text\">Transaction title</label>\r\n          <br />\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter transaction...\"\r\n          />\r\n        </div>\r\n        <div className=\"input-wrapper\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <small>(negative: expense, positive: income)</small>\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Enter amount...\"\r\n          />\r\n        </div>\r\n        <button>Add transaction</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Balance from \"./components/Balance\";\nimport IncomeExpenses from \"./components/IncomeExpenses\";\nimport TransactionList from \"./components/TransactionList\";\nimport AddTransaction from \"./components/AddTransaction\";\nimport GlobalProvider from \"./context/GlobalState\";\n\nfunction App() {\n  return (\n    <GlobalProvider>\n      <div className=\"app container\">\n        <div className=\"row\">\n          <div className=\"col-lg-4\">\n            <Balance />\n            <IncomeExpenses />\n          </div>\n          <div className=\"col-lg-4\">\n            <AddTransaction />\n          </div>\n          <div className=\"col-lg-4\">\n            <TransactionList />\n          </div>\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}